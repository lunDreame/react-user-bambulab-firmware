{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","printerSerial","setPrinterSerial","useState","isValidSerial","setIsValidSerial","username","setUsername","password","setPassword","isInputFocused","setIsInputFocused","loginMessage","setLoginMessage","repositoryMessage","setRepositoryMessage","isLoggedIn","setIsLoggedIn","currentVersion","setCurrentVersion","releaseNoteModalContent","setReleaseNoteModalContent","showReleaseNoteModal","setShowReleaseNoteModal","showUpdateConfirmation","setShowUpdateConfirmation","handleDeviceVersion","async","response","axios","post","concat","process","REACT_APP_BAMBULAB","accessToken","withCredentials","data","success","dev_id","version","result","error","console","handleUpdateCancellation","React","createElement","className","onClick","handleReleaseNoteClick","releaseNoteContent","firmware","description","replace","JSON","stringify","ams","handleRepoUpdateClick","Fragment","type","value","onChange","event","inputValue","target","trim","toUpperCase","test","onFocus","handleInputFocus","onBlur","handleInputBlur","placeholder","e","message","stopPropagation","REACT_APP_GITHUB","handleRepoUpdate","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.620b2835.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [printerSerial, setPrinterSerial] = useState('');\n  const [isValidSerial, setIsValidSerial] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isInputFocused, setIsInputFocused] = useState(false);\n  const [loginMessage, setLoginMessage] = useState('');\n  const [repositoryMessage, setRepositoryMessage] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentVersion, setCurrentVersion] = useState([]);\n  const [releaseNoteModalContent, setReleaseNoteModalContent] = useState('');\n  const [showReleaseNoteModal, setShowReleaseNoteModal] = useState(false);\n  const [showUpdateConfirmation, setShowUpdateConfirmation] = useState(false);\n\n  const handleSerialInputChange = (event) => {\n    const inputValue = event.target.value.trim().toUpperCase();\n    setPrinterSerial(inputValue);\n    const serialPattern = /^(00[MW]|03W|01[SPT]|030|039)[a-zA-Z0-9]{12}$/;\n    setIsValidSerial(serialPattern.test(inputValue));\n  };\n\n  const handleInputFocus = () => {\n    setIsInputFocused(true);\n  };\n\n  const handleInputBlur = () => {\n    setIsInputFocused(false);\n  };\n\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_BAMBULAB}/login`,\n        { username, password }, { withCredentials: true });\n      setLoginMessage(response.data.message);\n\n      if (response.data.success && response.data.data) {\n        await handleDeviceVersion(response.data.data);\n      }\n    } catch (error) {\n      setLoginMessage(error.message);\n    }\n  };\n\n  const handleDeviceVersion = async (accessToken) => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_BAMBULAB}/device-version`,\n        { printerSerial, accessToken }, { withCredentials: true });\n\n      if (response.data.success && response.data.data) {\n        const { dev_id, version, ...result } = response.data.data;\n        setCurrentVersion(result);\n        setIsLoggedIn(true);\n      }\n    } catch (error) {\n      console.error('Error fetching device version:', error);\n    }\n  };\n\n  const handleRepoUpdate = async () => {\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_GITHUB}/update-file`,\n        { printerSerial, currentVersion }, { withCredentials: true });\n\n      setRepositoryMessage(response.data.message);\n    } catch (error) {\n      console.error('Error updating device URL:', error);\n    }\n  };\n\n  const handleRepoUpdateClick = () => {\n    setShowUpdateConfirmation(true);\n  };\n\n  const handleUpdateConfirmation = async () => {\n    await handleRepoUpdate();\n    setShowUpdateConfirmation(false);\n  };\n\n  const handleUpdateCancellation = () => {\n    setShowUpdateConfirmation(false);\n  };\n\n  const handleReleaseNoteClick = () => {\n    setShowReleaseNoteModal(true);\n    const releaseNoteContent = currentVersion.firmware[0].description.replace(/\\\\n/g, '\\n');\n    setReleaseNoteModalContent(releaseNoteContent);\n  };\n\n  return (\n    <div className=\"app-container\">\n      {!isLoggedIn ? (\n        <>\n          <h1 className=\"main-title\">Printer Firmware Provisioning</h1>\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              value={printerSerial}\n              onChange={handleSerialInputChange}\n              onFocus={handleInputFocus}\n              onBlur={handleInputBlur}\n              placeholder=\"Printer Serial Number\"\n              className={`input-field ${isInputFocused && !isValidSerial ? 'invalid' : ''}`}\n            />\n            {isInputFocused && !isValidSerial && (\n              <p className=\"msg invalid\">Invalid serial number.</p>\n            )}\n          </div>\n          <h2 className=\"sub-title\">Bambu Lab Account</h2>\n\n          <div className=\"input-container\">\n            <input\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Email or Phone Number\"\n              className=\"input-field\"\n            />\n          </div>\n          <div className=\"input-container\">\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password\"\n              className=\"input-field\"\n            />\n          </div>\n          <button onClick={handleLogin} className=\"login-button\">Login</button>\n          {loginMessage && <p className=\"login-msg\">{loginMessage}</p>}\n        </>\n      ) : (\n        <div className=\"info-container\">\n          <h2>Release Note & Repo Update</h2>\n          <div className=\"release-note-container\">\n            <p className=\"description\">\n              {printerSerial}:\n              <button\n                className=\"release-note-button\"\n                onClick={handleReleaseNoteClick}\n              >\n                Release Note\n              </button>\n            </p>\n            <p className=\"ams\">\n              AMS: <span className=\"ams-value\">{JSON.stringify(currentVersion.ams[0]) || 'N/A'}</span>\n            </p>\n          </div>\n          <button onClick={handleRepoUpdateClick} className=\"repo-update-button\">Repo Update</button>\n          {repositoryMessage && <p className=\"repo-msg\">{repositoryMessage}</p>}\n        </div>\n      )}\n      {showReleaseNoteModal && (\n        <div className=\"modal-background\" onClick={() => setShowReleaseNoteModal(false)}>\n          <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\n            <span className=\"close\" onClick={() => setShowReleaseNoteModal(false)}>&times;</span>\n            <p className=\"release-note\">{releaseNoteModalContent}</p>\n          </div>\n        </div>\n      )}\n      {showUpdateConfirmation && (\n        <div className=\"modal-background\" onClick={handleUpdateCancellation}>\n          <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\n            <p>Do you want to proceed with the repository update?</p>\n            <button onClick={handleUpdateConfirmation} className=\"confirmation-button\">Yes</button>\n            <button onClick={handleUpdateCancellation} className=\"confirmation-button\">No</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}